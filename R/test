function (seurat_obj = seurat_data, gene_modules = antler_data$gene_modules$lists$unbiasedGMs_DE$content, 
          metadata_1 = NULL, order_1 = NULL, metadata_2 = NULL, order_2 = NULL, 
          rename_modules = NULL, plot_path = "scHelper_log/GM_classification/") 
{
  classified_gms_1 <- GeneModuleClassification(seurat_obj = seurat_obj, 
                                               gene_modules = gene_modules, group_by = metadata_1, 
                                               plot_path = plot_path)
  if (is.null(metadata_2) || is.na(metadata_2) || is.nan(metadata_2)) {
    print(paste0("Gene modules ordered only on ", metadata_1))
    class_order_gms <- order_1[order_1 %in% classified_gms_1$group_by]
    ordered_classified_gms <- left_join(data.frame(group_by = class_order_gms), 
                                        classified_gms_1, by = "group_by")
    ordered_gms <- gene_modules[order(match(names(gene_modules), 
                                            ordered_classified_gms$gene_module))]
  }
  else {
    print(paste0("Gene modules ordered on ", metadata_1, 
                 " AND ", metadata_2))
    temp_seurat <- SplitObject(seurat_obj, split.by = metadata_1)
    
    final_classified_gms <- data.frame()
    plots <- list()
    for (i in order_1) {
      print(i)
      names_subset_gms <- classified_gms_1[classified_gms_1$group_by == 
                                             i, "gene_module"]
      subset_gms <- gene_modules[names_subset_gms$gene_module]
      if (length(subset_gms) != 0) {
        classified_gms_list <- GeneModuleClassification(seurat_obj = temp_seurat[[i]], 
                                                        gene_modules = subset_gms, group_by = metadata_2, 
                                                        plot_path = plot_path, publish_logs = FALSE)
        classified_gms <- as.data.frame(c(classified_gms_list[1], 
                                          classified_gms_list[2]))
        class_order_gms <- order_2[order_2 %in% classified_gms$group_by]
        ordered_classified_gms <- left_join(data.frame(group_by = class_order_gms), 
                                            classified_gms, by = "group_by")
        
        final_classified_gms <- rbind(final_classified_gms, ordered_classified_gms)
  
        plots <- c(plots, classified_gms_list[3:length(classified_gms_list)])
      }
      ordered_gms <- gene_modules[order(match(names(gene_modules),final_classified_gms$gene_module))]
    }
    png(paste0(plot_path, metadata_2, ".png"), width = 40, 
        height = 30, units = "cm", res = 200)
    grid.arrange(grobs = plots)
    graphics.off()
    if (!is.null(rename_modules)) {
      if (rename_modules != metadata_1 && rename_modules != metadata_2) {
        stop("rename_modules must be set as the value of metadata_1 or metadata_2")
      }
      else if (rename_modules == metadata_1) {
        cat(paste("\nRenaming modules based on", metadata_1, "classification\n\n"))
        classified_gms <- classified_gms_1
      }
      else {
        cat(paste("\nRenaming modules based on", metadata_2, "classification\n\n"))
      }
      names(ordered_gms) <- final_classified_gms %>%
        group_by(group_by) %>% 
        mutate(pos = 1:n()) %>%
        mutate(group_by = paste(group_by, pos, sep = "-")) %>%
        dplyr::pull(group_by)
    }
    return(ordered_gms)
  }
}